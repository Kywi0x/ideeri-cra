// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts           OAuthAccount[]
  calendarSyncStates CalendarSyncState[]
  events             Event[]
}

model OAuthAccount {
  id              String   @id @default(cuid())
  userId          String
  provider        String   @default("google")
  accessTokenEnc  Bytes
  refreshTokenEnc Bytes
  expiresAt       DateTime?
  scope           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([provider])
}

model CalendarSyncState {
  id          String   @id @default(cuid())
  userId      String
  calendarId  String
  syncToken   String?
  lastSyncAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, calendarId])
}

model Event {
  id              String   @id @default(cuid())
  userId          String
  googleEventId   String
  calendarId      String
  summary         String?
  description     String?
  startUtc        DateTime
  endUtc          DateTime
  isAllDay        Boolean  @default(false)
  status          String
  etag            String?
  updatedAtGoogle DateTime?
  contentHash     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  links EventUSLink[]

  @@unique([googleEventId, calendarId])
  @@index([userId])
  @@index([calendarId])
}

model NotionUS {
  id              String   @id @default(cuid())
  notionPageId    String   @unique
  usKey           String?  @unique
  title           String
  product         String?
  status          String?
  assigneesEmails String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  links EventUSLink[]
}

model EventUSLink {
  eventId    String
  notionUsId String
  confidence Float     @default(0)
  createdBy  String?
  createdAt  DateTime  @default(now())

  event  Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  notion NotionUS @relation(fields: [notionUsId], references: [id], onDelete: Cascade)

  @@id([eventId, notionUsId])
  @@index([notionUsId])
}
